import React, { useMemo, useRef, useState } from "react"; import JSZip from "jszip";

// Helper: convert dataURL to Blob function dataURLtoBlob(dataurl) { const arr = dataurl.split(","); const mime = arr[0].match(/:(.*?);/)[1]; const bstr = atob(arr[1]); let n = bstr.length; const u8arr = new Uint8Array(n); while (n--) u8arr[n] = bstr.charCodeAt(n); return new Blob([u8arr], { type: mime }); }

function drawIcon({ size = 80, bg = "#111827", fg = "#ffffff", text = "TV", font = "600" }) { const canvas = document.createElement("canvas"); canvas.width = size; canvas.height = size; const ctx = canvas.getContext("2d"); ctx.fillStyle = bg; ctx.fillRect(0, 0, size, size); ctx.fillStyle = fg; ctx.font = ${font} ${Math.round(size * 0.42)}px ui-sans-serif, system-ui; ctx.textAlign = "center"; ctx.textBaseline = "middle"; ctx.fillText(text.slice(0, 3).toUpperCase(), size / 2, size / 2 + 2); return canvas.toDataURL("image/png"); }

const DEFAULT_INDEX_HTML = (title) => `<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${title}</title>
    <style>html,body{margin:0;height:100%;background:#000;color:#fff;font-family:system-ui,-apple-system,Segoe UI,Roboto}</style>
  </head>
  <body>
    <main style="display:grid;place-items:center;height:100%">
      <div style="text-align:center">
        <h1 style="margin:0 0 8px;">${title}</h1>
        <p>webOS app scaffold generated by WebOS App Builder</p>
        <p id="device"></p>
      </div>
    </main>
    <script>
      // Basic webOS info example (safe if webOS object exists)
      try {
        if (window.webOS && webOS.deviceInfo) {
          webOS.deviceInfo(function (info) {
            document.getElementById('device').textContent = 'Device: ' + (info.modelName || 'unknown');
          });
        }
      } catch(e){}
    </script>
  </body>
</html>`;export default function WebOSAppBuilder() { const [appId, setAppId] = useState("com.example.myapp"); const [title, setTitle] = useState("My webOS App"); const [version, setVersion] = useState("1.0.0"); const [vendor, setVendor] = useState("YourName"); const [iconColor, setIconColor] = useState("#111827"); const [iconText, setIconText] = useState("TV"); const [fgColor, setFgColor] = useState("#ffffff"); const [resolution, setResolution] = useState("1920x1080"); const [handlesRelaunch, setHandlesRelaunch] = useState(false); const [disableBackHistoryAPI, setDisableBackHistoryAPI] = useState(false); const [requiredMemory, setRequiredMemory] = useState(20); const [includeLargeIcon, setIncludeLargeIcon] = useState(true); const [addSplash, setAddSplash] = useState(false); const [splashColor, setSplashColor] = useState("#0b0b0b"); const [customIndex, setCustomIndex] = useState(""); const iconUploadRef = useRef(null); const largeIconUploadRef = useRef(null);

const exampleAppinfo = useMemo(() => ({ id: appId, title, main: "index.html", icon: "icon.png", ...(includeLargeIcon ? { largeIcon: "largeIcon.png" } : {}), type: "web", vendor, version, resolution, iconColor, // LG docs: background color for app tile handlesRelaunch, disableBackHistoryAPI, requiredMemory, ...(addSplash ? { splashBackground: "splash.png", splashColor } : {}), }), [appId, title, includeLargeIcon, vendor, version, resolution, iconColor, handlesRelaunch, disableBackHistoryAPI, requiredMemory, addSplash, splashColor]);

async function generateZip() { // Validate app id if (!/^[a-z0-9][a-z0-9.-]*$/.test(appId)) { alert("App ID must be lowercase letters, numbers, dots, or hyphens and start with an alphanumeric."); return; } if (!/^\d+.\d+.\d+$/.test(version)) { alert("Version must be in the form x.y.z (e.g., 1.0.0)"); return; }

const zip = new JSZip();
const root = zip.folder("webos-app");

// Write appinfo.json
root.file("appinfo.json", JSON.stringify(exampleAppinfo, null, 2));

// index.html
root.file("index.html", customIndex.trim() ? customIndex : DEFAULT_INDEX_HTML(title));

// ICONS
const iconFile = iconUploadRef.current?.files?.[0];
const largeIconFile = largeIconUploadRef.current?.files?.[0];

// Generate default icons if none uploaded
const icon80 = drawIcon({ size: 80, bg: iconColor, fg: fgColor, text: iconText });
const icon130 = drawIcon({ size: 130, bg: iconColor, fg: fgColor, text: iconText });

// Add icon.png (80x80)
if (iconFile) {
  const buf = await iconFile.arrayBuffer();
  root.file("icon.png", buf);
} else {
  root.file("icon.png", dataURLtoBlob(icon80));
}

// Add largeIcon.png (130x130) if requested
if (includeLargeIcon) {
  if (largeIconFile) {
    const buf = await largeIconFile.arrayBuffer();
    root.file("largeIcon.png", buf);
  } else {
    root.file("largeIcon.png", dataURLtoBlob(icon130));
  }
}

// Splash (optional)
if (addSplash) {
  // simple generated splash: big tile
  const splash = drawIcon({ size: 512, bg: iconColor, fg: fgColor, text: title.slice(0, 2), font: "700" });
  root.file("splash.png", dataURLtoBlob(splash));
}

// README with packaging instructions
root.file("README.txt", `webOS App Scaffold\n\nPackage to .ipk with LG webOS CLI:\n  ares-package webos-app\n\nInstall to a dev-mode TV (replace <device>):\n  ares-install -d <device> <generated .ipk>\n\nIcon sizes used:\n  icon.png      80x80 PNG\n  largeIcon.png 130x130 PNG\n\nNotes:\n- iconColor sets the tile background color.\n- Shortcuts (Quick Access) are set by the user on the TV; apps cannot pre-bind number keys.\n`);

const blob = await zip.generateAsync({ type: "blob" });
const url = URL.createObjectURL(blob);
const a = document.createElement("a");
a.href = url;
a.download = `${appId}_${version}_scaffold.zip`;
a.click();
URL.revokeObjectURL(url);

}

return ( <div className="min-h-screen bg-neutral-950 text-neutral-100 p-6"> <div className="max-w-5xl mx-auto"> <header className="mb-6"> <h1 className="text-2xl font-bold">webOS App Builder</h1> <p className="text-sm text-neutral-400">Generate a ready-to-package webOS TV app scaffold (.zip). Customize app ID, title, version, icon color, and more.</p> </header>

<div className="grid md:grid-cols-3 gap-4">
      <section className="md:col-span-2 bg-neutral-900 rounded-2xl p-4 shadow">
        <h2 className="font-semibold mb-3">App metadata</h2>
        <div className="grid sm:grid-cols-2 gap-3">
          <label className="flex flex-col gap-1 text-sm">
            <span>App ID</span>
            <input className="px-3 py-2 rounded bg-neutral-800 outline-none" value={appId} onChange={(e)=>setAppId(e.target.value)} placeholder="com.example.myapp" />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Title</span>
            <input className="px-3 py-2 rounded bg-neutral-800 outline-none" value={title} onChange={(e)=>setTitle(e.target.value)} />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Version</span>
            <input className="px-3 py-2 rounded bg-neutral-800 outline-none" value={version} onChange={(e)=>setVersion(e.target.value)} />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Vendor</span>
            <input className="px-3 py-2 rounded bg-neutral-800 outline-none" value={vendor} onChange={(e)=>setVendor(e.target.value)} />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Resolution</span>
            <select className="px-3 py-2 rounded bg-neutral-800 outline-none" value={resolution} onChange={(e)=>setResolution(e.target.value)}>
              <option value="1920x1080">1920x1080 (FHD)</option>
              <option value="1280x720">1280x720 (HD)</option>
            </select>
          </label>
          <label className="flex items-center gap-2 text-sm mt-6">
            <input type="checkbox" checked={handlesRelaunch} onChange={(e)=>setHandlesRelaunch(e.target.checked)} />
            <span>handlesRelaunch</span>
          </label>
          <label className="flex items-center gap-2 text-sm">
            <input type="checkbox" checked={disableBackHistoryAPI} onChange={(e)=>setDisableBackHistoryAPI(e.target.checked)} />
            <span>disableBackHistoryAPI</span>
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>requiredMemory (MB)</span>
            <input type="number" className="px-3 py-2 rounded bg-neutral-800 outline-none" value={requiredMemory} onChange={(e)=>setRequiredMemory(parseInt(e.target.value||"0",10))} />
          </label>
        </div>

        <h2 className="font-semibold mt-6 mb-3">Icon & splash</h2>
        <div className="grid sm:grid-cols-2 gap-3">
          <label className="flex flex-col gap-1 text-sm">
            <span>Icon background (iconColor)</span>
            <input type="color" className="h-10 w-full rounded bg-neutral-800" value={iconColor} onChange={(e)=>setIconColor(e.target.value)} />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Icon text (max 3 chars)</span>
            <input className="px-3 py-2 rounded bg-neutral-800 outline-none" value={iconText} onChange={(e)=>setIconText(e.target.value.slice(0,3))} />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Icon foreground</span>
            <input type="color" className="h-10 w-full rounded bg-neutral-800" value={fgColor} onChange={(e)=>setFgColor(e.target.value)} />
          </label>
          <label className="flex items-center gap-2 text-sm mt-6">
            <input type="checkbox" checked={includeLargeIcon} onChange={(e)=>setIncludeLargeIcon(e.target.checked)} />
            <span>Include largeIcon.png (130×130)</span>
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Upload custom icon (80×80 PNG)</span>
            <input ref={iconUploadRef} type="file" accept="image/png" className="px-3 py-2 rounded bg-neutral-800 outline-none" />
          </label>
          <label className="flex flex-col gap-1 text-sm">
            <span>Upload custom largeIcon (130×130 PNG)</span>
            <input ref={largeIconUploadRef} type="file" accept="image/png" className="px-3 py-2 rounded bg-neutral-800 outline-none" />
          </label>
        </div>

        <div className="mt-4 flex items-center gap-2 text-sm">
          <input type="checkbox" checked={addSplash} onChange={(e)=>setAddSplash(e.target.checked)} />
          <span>Add generated splash (splash.png) & splashColor</span>
          {addSplash && (
            <input type="color" className="ml-3 h-10 rounded bg-neutral-800" value={splashColor} onChange={(e)=>setSplashColor(e.target.value)} />
          )}
        </div>

        <h2 className="font-semibold mt-6 mb-2">Custom index.html (optional)</h2>
        <textarea className="w-full min-h-[160px] rounded bg-neutral-800 p-3 text-sm" placeholder="Paste your custom HTML here or leave empty to use a default template." value={customIndex} onChange={(e)=>setCustomIndex(e.target.value)} />

        <div className="mt-6">
          <button onClick={generateZip} className="px-4 py-2 rounded-2xl bg-white text-black font-semibold shadow">
            Generate .zip
          </button>
        </div>
      </section>

      <aside className="bg-neutral-900 rounded-2xl p-4 shadow">
        <h3 className="font-semibold mb-2">Preview</h3>
        <div className="flex items-center gap-4">
          <div className="grid place-items-center w-24 h-24 rounded-xl border border-neutral-800" style={{ background: iconColor }}>
            <span className="font-bold text-xl" style={{ color: fgColor }}>{iconText.slice(0,3).toUpperCase()}</span>
          </div>
          <div className="text-xs text-neutral-400">
            <div>icon.png 80×80</div>
            {includeLargeIcon && <div>largeIcon.png 130×130</div>}
          </div>
        </div>

        <h3 className="font-semibold mt-6 mb-2">What you'll get</h3>
        <pre className="text-xs bg-neutral-800 p-3 rounded overflow-auto">{`webos-app/

appinfo.json index.html icon.png${includeLargeIcon ? "\n  largeIcon.png" : ""}${addSplash ? "\n  splash.png" : ""}`}</pre>

<h3 className="font-semibold mt-6 mb-2">Next steps</h3>
        <ol className="list-decimal ml-5 text-sm text-neutral-300 space-y-2">
          <li>Unzip the archive.</li>
          <li>Package to .ipk with LG CLI: <code className="bg-neutral-800 px-2 py-1 rounded">ares-package webos-app</code></li>
          <li>Install to your dev TV: <code className="bg-neutral-800 px-2 py-1 rounded">ares-install -d &lt;device&gt; &lt;your.ipk&gt;</code></li>
        </ol>

        <div className="mt-6 text-xs text-neutral-400">
          <p><strong>Shortcuts (Quick Access):</strong> on the TV, launch your app, then press & hold a number (1–8) on the remote to bind it. Apps cannot pre-bind this.</p>
        </div>
      </aside>
    </div>

    <footer className="mt-8 text-xs text-neutral-500">
      <p>Fields mapped per LG docs: <code>id</code>, <code>title</code>, <code>type</code>, <code>main</code>, <code>icon</code>, <code>version</code>, optional <code>largeIcon</code>, <code>iconColor</code>, <code>resolution</code>, <code>handlesRelaunch</code>, <code>disableBackHistoryAPI</code>, <code>requiredMemory</code>, and optional splash.</p>
    </footer>
  </div>
</div>

); }

